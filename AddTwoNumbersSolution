from typing import Optional

# Definition for singly-linked list.
class ListNode:
     def __init__(self, val=0, next=None):
         self.val = val
         self.next = next

# The runtime complexity of this solution is O(Max(N,M))
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        n1 = 0
        n2 = 0
        n1tracker = 0
        n2tracker = 0
        check1 = True
        check2 = True
        while check1:
            if l1.next == None:
                check1 = False
            n1 += l1.val * (10 ** n1tracker)
            n1tracker += 1
            l1 = l1.next
        while check2:
            if l2.next == None:
                check2 = False
            n2 += l2.val * (10 ** n2tracker)
            n2tracker += 1
            l2 = l2.next
        result = n1 + n2
        stringresult = str(result)
        resultlist = []
        head = None
        for digit in stringresult:
            currentnode = ListNode(int(digit), head)
            resultlist.append(currentnode)
            head = currentnode
        return resultlist[-1]
    
'''
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example 1:

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]

Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]


Constraints:

    The number of nodes in each linked list is in the range [1, 100].
    0 <= Node.val <= 9
    It is guaranteed that the list represents a number that does not have leading zeros.


'''



        

    

        